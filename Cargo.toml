[lib]
path = "src/_lib.rs"

[package]
name = "safer-ffi"
# Keep in sync with `[dependencies.safer_ffi-proc_macro]` and `src/proc_macro/Cargo.toml`
version = "0.0.10"
authors = ["Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"]
edition = "2018"

description = "Write safer FFI code in Rust without polluting it with unsafe code"
keywords = ["ffi", "no_std", "framework", "safety", "bindings"]
license = "MIT"
repository = "https://github.com/getditto/safer_ffi"

readme = "README.md"

exclude = ["/guide"]

[features]
default = [
    "std",
]

nightly = []

alloc = []
std = [ "alloc" ]

derives = ["proc_macros"] # alias
proc_macros = [
    "safer_ffi-proc_macro/proc_macros",
    "require_unsafe_in_body",
    "proc-macro-hack",
]
debug_proc_macros = [
    "proc_macros",
    "safer_ffi-proc_macro/verbose-expansions",
]

out-refs = ["uninit"]

headers = [
    "inventory",
    "safer_ffi-proc_macro/headers",
    "std",
]

[dev-dependencies]
macro_rules_attribute = "0.0.1"
safer-ffi.path = "."
safer-ffi.features = ["proc_macros", "headers"]

[target.'cfg(not(target = "wasm32-unknown-unknown"))'.dependencies]
libc = { version = "0.2.66", default-features = false }

[dependencies]
paste = { package = "mini_paste", version = "0.1.*" }
log = { version = "0.4.8", optional = true }
require_unsafe_in_body = { version = "0.2.1", optional = true }
inventory = { version = "0.1.6", optional = true }
proc-macro-hack = { version = "0.5.15", optional = true }
cfg-if = "1.0.0"

[dependencies.safer_ffi-proc_macro]
path = "src/proc_macro"
version = "0.0.10"

[dependencies.uninit]
optional = true
# Since we are relying on internals of their `Out` reference,
# we pin the version.
version = "=0.3.0"
default-features = false

[workspace]
members = ["src/proc_macro"]

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docs"]

[[test]]
name = "ffi-tests"
path = "ffi_tests/src/lib.rs"
