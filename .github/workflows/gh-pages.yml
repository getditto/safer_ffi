name: CI

on:
  push:
    branches:
      - master
  pull_request:

env:
  URL_ROOT_PATH: /safer_ffi/

jobs:
  # == CHECK == #
  check:
    name: Check nightly stable and MSRV
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        rust:
          - 1.57.0
          - stable
          # - nightly
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Instal LLVM
        run: choco install -y llvm
        if: runner.os == 'Windows'

      - name: Clone repo
        uses: actions/checkout@v2

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --features proc_macros,log,out-refs

  check-features:
    name: Check all the features combinations on MSRV
    runs-on: ubuntu-latest
    needs: check
    strategy:
      matrix:
        feature--std: ['', '--features std']
        feature--alloc: ['', '--features alloc']
        feature--async-fn: ['', '--features async-fn']
        # feature--log: ['', '--features log']
        feature--out-refs: ['', '--features out-refs']
        feature--node-js: ['', '--features node-js']
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.57.0
          override: true

      - name: Clone repo
        uses: actions/checkout@v2

      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: |
            --no-default-features
            ${{ matrix.feature--std }}
            ${{ matrix.feature--alloc }}
            ${{ matrix.feature--async-fn }}
            ${{ matrix.feature--out-refs }}
            ${{ matrix.feature--node-js }}

  # == BUILD & TEST == #
  build-and-test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    needs: [check, check-features]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          # - windows-latest
        rust:
          # - 1.57.0
          - stable
          - nightly
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          override: true
          toolchain: ${{ matrix.rust }}
          target: wasm32-unknown-unknown

      - name: Clone repo
        uses: actions/checkout@v2

      - name: Cargo test
        uses: actions-rs/cargo@v1
        env:
          RUSTC_BOOTSTRAP: 1
          RUSTFLAGS: -Zmacro-backtrace
          RUST_BACKTRACE: full
        with:
          command: test
          args: --no-default-features --features std

      - name: FFI test (C & C#?)
        run: make -C ffi_tests
        env:
          RUSTC_BOOTSTRAP: 1
          RUSTFLAGS: -Zmacro-backtrace
          RUST_BACKTRACE: full

      - name: FFI test (js)
        run: make -C js_tests
        env:
          RUSTC_BOOTSTRAP: 1
          RUSTFLAGS: -Zmacro-backtrace
          RUST_BACKTRACE: full

  # Deploy to Github pages #
  deploy:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-18.04
    needs:
      - build-and-test
    steps:
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: default
          override: true
          toolchain: nightly

      - name: Install `mdbook`
        uses: peaceiris/actions-mdbook@v1
        with:
          mdbook-version: '0.3.7'

      - name: Clone repo
        uses: actions/checkout@v2

      - name: Build docs
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --features docs

      - name: Build guide and documentation
        run: |
          (cd guide
            (cd src && sed -e "s@{ROOT_PATH}@${URL_ROOT_PATH}@" links.md.template > links.md)
            mdbook build
            mkdir -p book/{assets,rustdoc}
            cp -r assets/* book/assets/
            cp -r ../target/doc/* book/rustdoc/
          )

      - name: Deploy to Github Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./guide/book
