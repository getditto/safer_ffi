/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/


#include <stddef.h>
#include <stdint.h>

typedef enum Wow {
    WOW_LEROY,
    WOW_JENKINS,
} Wow_t;

typedef struct AnUnusedStruct {
    Wow_t are_you_still_there;
} AnUnusedStruct_t;

typedef struct {
    float idx[3];
} float_3_array_t;

typedef struct {
    uint64_t idx[5];
} uint64_5_array_t;

typedef struct {
    uint8_t idx[1];
} uint8_1_array_t;

typedef struct {
    uint8_1_array_t idx[2];
} uint8_1_array_2_array_t;

typedef struct {
    uint8_1_array_2_array_t idx[3];
} uint8_1_array_2_array_3_array_t;

typedef struct ArraysStruct {
    float_3_array_t floats;

    uint64_5_array_t sizes;

    uint8_1_array_2_array_t dim_2;

    uint8_1_array_2_array_3_array_t dim_3;
} ArraysStruct_t;

#define FOO ...

typedef enum Bar {
    BAR_A,
    BAR_B,
} Bar_t;


#include <stdbool.h>

typedef struct next_generation {
    Bar_t gen;

    void * (*cb)(bool);
} next_generation_t;

typedef ... Opaque__str_t;

#define SOME_NAME ...

typedef struct ConstGenericStruct_uint8_1 {
    uint8_1_array_t data;
} ConstGenericStruct_uint8_1_t;

typedef struct {
    uint8_t idx[2];
} uint8_2_array_t;

typedef struct ConstGenericStruct_uint8_2 {
    uint8_2_array_t data;
} ConstGenericStruct_uint8_2_t;

typedef struct {
    uint16_t idx[3];
} uint16_3_array_t;

typedef struct ConstGenericStruct_uint16_3 {
    uint16_3_array_t data;
} ConstGenericStruct_uint16_3_t;

typedef struct SpecificConstGenericContainer {
    ConstGenericStruct_uint8_1_t field1;

    ConstGenericStruct_uint8_2_t field2;

    ConstGenericStruct_uint16_3_t field3;
} SpecificConstGenericContainer_t;

typedef enum triforce {
    TRIFORCE_DIN,
    TRIFORCE_FARORE,
    TRIFORCE_NARYU,
} triforce_t;

int32_t
_issue_45 (
    int32_t __arg_0);

/** <No documentation available> */
typedef struct Enum Enum_t;

Enum_t *
_my_enum_is_opaque (void);

/** \brief
 *  The layout of `alloc::string::String` is opaque/subject to changes.
 */
typedef struct Opaque_String Opaque_String_t;

Opaque_String_t *
_some_opaque_std_lib_type (void);

int32_t
async_get_ft (void);

typedef struct ArcDynFn0_void {
    void * env_ptr;

    void (*call)(void *);

    void (*release)(void *);

    void (*retain)(void *);
} ArcDynFn0_void_t;

void
call_in_the_background (
    ArcDynFn0_void_t f);

typedef enum SomeReprCEnum {
    SOME_REPR_C_ENUM_SOME_VARIANT,
} SomeReprCEnum_t;

void
check_SomeReprCEnum (
    SomeReprCEnum_t _baz);

void
check_bar (
    Bar_t _bar);

char *
concat (
    char const * fst,
    char const * snd);

void
free_char_p (
    char * _string);

/** <No documentation available> */
typedef struct foo foo_t;

void
free_foo (
    foo_t * foo);

typedef struct slice_ref_int32 {
    int32_t const * ptr;

    size_t len;
} slice_ref_int32_t;

int32_t const *
max (
    slice_ref_int32_t xs);

void *
my_renamed_ptr_api (void);

foo_t *
new_foo (void);

int32_t
read_foo (
    foo_t const * foo);

uint16_t (*
returns_a_fn_ptr (void))(uint8_t);

/** \brief
 *  The layout of `core::task::wake::Context` is opaque/subject to changes.
 */
typedef struct Opaque_Context Opaque_Context_t;

ArcDynFn0_void_t
rust_future_task_context_get_waker (
    Opaque_Context_t const * task_context);

void
rust_future_task_context_wake (
    Opaque_Context_t const * task_context);

/** <No documentation available> */
typedef struct Erased Erased_t;

/** \brief
 *  An FFI-safe `Poll<()>`.
 */
/** \remark Has the same ABI as `int8_t` **/
#ifdef DOXYGEN
typedef
#endif
enum PollFuture {
    /** <No documentation available> */
    POLL_FUTURE_COMPLETED = 0,
    /** <No documentation available> */
    POLL_FUTURE_PENDING = -1,
}
#ifndef DOXYGEN
; typedef int8_t
#endif
PollFuture_t;

/** <No documentation available> */
typedef struct FfiFutureVTable {
    /** <No documentation available> */
    void (*release_vptr)(Erased_t *);

    /** <No documentation available> */
    PollFuture_t (*dyn_poll)(Erased_t *, Opaque_Context_t *);
} FfiFutureVTable_t;

/** <No documentation available> */
typedef struct VirtualPtr__Erased_ptr_FfiFutureVTable {
    /** <No documentation available> */
    Erased_t * ptr;

    /** <No documentation available> */
    FfiFutureVTable_t vtable;
} VirtualPtr__Erased_ptr_FfiFutureVTable_t;

/** \brief
 *  `Box<dyn 'static + Send + FnMut() -> Ret>`
 */
typedef struct BoxDynFnMut0_void {
    /** <No documentation available> */
    void * env_ptr;

    /** <No documentation available> */
    void (*call)(void *);

    /** <No documentation available> */
    void (*free)(void *);
} BoxDynFnMut0_void_t;

/** <No documentation available> */
typedef struct DropGlueVTable {
    /** <No documentation available> */
    void (*release_vptr)(Erased_t *);
} DropGlueVTable_t;

/** <No documentation available> */
typedef struct VirtualPtr__Erased_ptr_DropGlueVTable {
    /** <No documentation available> */
    Erased_t * ptr;

    /** <No documentation available> */
    DropGlueVTable_t vtable;
} VirtualPtr__Erased_ptr_DropGlueVTable_t;

typedef struct FfiFutureExecutorVTable {
    void (*release_vptr)(Erased_t *);

    Erased_t * (*retain_vptr)(Erased_t const *);

    VirtualPtr__Erased_ptr_FfiFutureVTable_t (*dyn_spawn)(Erased_t const *, VirtualPtr__Erased_ptr_FfiFutureVTable_t);

    VirtualPtr__Erased_ptr_FfiFutureVTable_t (*dyn_spawn_blocking)(Erased_t const *, BoxDynFnMut0_void_t);

    void (*dyn_block_on)(Erased_t const *, VirtualPtr__Erased_ptr_FfiFutureVTable_t);

    VirtualPtr__Erased_ptr_DropGlueVTable_t (*dyn_enter)(Erased_t const *);
} FfiFutureExecutorVTable_t;

typedef struct VirtualPtr__Erased_ptr_FfiFutureExecutorVTable {
    Erased_t * ptr;

    FfiFutureExecutorVTable_t vtable;
} VirtualPtr__Erased_ptr_FfiFutureExecutorVTable_t;

int32_t
test_spawner (
    VirtualPtr__Erased_ptr_FfiFutureExecutorVTable_t executor);

typedef struct RefDynFnMut1_void_char_const_ptr {
    void * env_ptr;

    void (*call)(void *, char const *);
} RefDynFnMut1_void_char_const_ptr_t;

void
with_concat (
    char const * fst,
    char const * snd,
    RefDynFnMut1_void_char_const_ptr_t cb);

bool
with_foo (
    void (*cb)(foo_t *));

