/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#pragma warning disable IDE0044, IDE0049, IDE0055, IDE1006,
#pragma warning disable SA1004, SA1008, SA1023, SA1028,
#pragma warning disable SA1121, SA1134,
#pragma warning disable SA1201,
#pragma warning disable SA1300, SA1306, SA1307, SA1310, SA1313,
#pragma warning disable SA1500, SA1505, SA1507,
#pragma warning disable SA1600, SA1601, SA1604, SA1605, SA1611, SA1615, SA1649,

namespace FfiTests {
using System;
using System.Runtime.InteropServices;

public unsafe partial class Ffi {
    private const string RustLib = "ffi_tests";
}
public enum Wow_t : byte {
    Leroy,
    Jenkins,
}

[StructLayout(LayoutKind.Sequential, Size = 1)]
public unsafe struct AnUnusedStruct_t {
    public Wow_t are_you_still_there;
}

public unsafe partial class Ffi {
    public const Int32 FOO = 42;
}

public enum Bar_t : sbyte {
    A = 43,
    B = 42,
}

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe /* static */ delegate
    void *
    void_ptr_bool_fptr (
        [MarshalAs(UnmanagedType.U1)]
        bool _0);

/// <summary>
/// Hello, <c>World</c>!
/// </summary>
[StructLayout(LayoutKind.Sequential, Size = 16)]
public unsafe struct next_generation_t {
    /// <summary>
    /// I test some <c>gen</c>-eration.
    /// </summary>
    public Bar_t gen;

    /// <summary>
    /// with function pointers and everything!
    /// </summary>
    [MarshalAs(UnmanagedType.FunctionPtr)]
    public void_ptr_bool_fptr cb;
}

/// <summary>
/// Hello, <c>World</c>!
/// </summary>
public enum triforce_t : byte {
    Din = 3,
    Farore = 1,
    Naryu,
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    Int32 async_get_ft ();
}

/// <summary>
/// This is a <c>#[repr(C)]</c> enum, which leads to a classic enum def.
/// </summary>
public enum SomeReprCEnum_t  {
    /// <summary>
    /// This is some variant.
    /// </summary>
    SomeVariant,
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void check_SomeReprCEnum (
        SomeReprCEnum_t _baz);
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void check_bar (
        Bar_t _bar);
}

public unsafe partial class Ffi {
    /// <summary>
    /// Concatenate the two input strings into a new one.
    ///
    /// The returned string must be freed using <c>free_char_p</c>.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    byte * concat (
        byte /*const*/ * fst,
        byte /*const*/ * snd);
}

public unsafe partial class Ffi {
    /// <summary>
    /// Frees a string created by <c>concat</c>.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void free_char_p (
        byte * _string);
}

public struct foo_t {
    #pragma warning disable 0169
    private byte OPAQUE;
    #pragma warning restore 0169
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void free_foo (
        foo_t * foo);
}

[StructLayout(LayoutKind.Sequential, Size = 16)]
public unsafe struct slice_ref_int32_t {
    public Int32 /*const*/ * ptr;
    public UIntPtr len;
}

public unsafe partial class Ffi {
    /// <summary>
    /// Returns a pointer to the maximum integer of the input slice, or <c>NULL</c> if
    /// it is empty.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    Int32 /*const*/ * max (
        slice_ref_int32_t xs);
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    foo_t * new_foo ();
}

public unsafe partial class Ffi {
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    Int32 read_foo (
        foo_t /*const*/ * foo);
}

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe /* static */ delegate
    void
    void_void_ptr_char_const_ptr_fptr (
        void * _0,
        byte /*const*/ * _1);

[StructLayout(LayoutKind.Sequential, Size = 16)]
public unsafe struct RefDynFnMut1_void_char_const_ptr_t {
    public void * env_ptr;
    [MarshalAs(UnmanagedType.FunctionPtr)]
    public void_void_ptr_char_const_ptr_fptr call;
}

public unsafe partial class Ffi {
    /// <summary>
    /// Same as <c>concat</c>, but with a callback-based API to auto-free the created
    /// string.
    /// </summary>
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    void with_concat (
        byte /*const*/ * fst,
        byte /*const*/ * snd,
        RefDynFnMut1_void_char_const_ptr_t cb);
}

[UnmanagedFunctionPointer(CallingConvention.Winapi)]
public unsafe /* static */ delegate
    void
    void_foo_ptr_fptr (
        foo_t * _0);

public unsafe partial class Ffi {
    [return: MarshalAs(UnmanagedType.U1)]
    [DllImport(RustLib, ExactSpelling = true)] public static unsafe extern
    bool with_foo (
        [MarshalAs(UnmanagedType.FunctionPtr)]
        void_foo_ptr_fptr cb);
}


} /* FfiTests */
